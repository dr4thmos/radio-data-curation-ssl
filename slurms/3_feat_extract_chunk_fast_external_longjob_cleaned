#!/bin/bash
#SBATCH --job-name=feat_extract
#SBATCH --account=INA24_C5B09
#SBATCH --partition=boost_usr_prod
#SBATCH --qos=boost_qos_lprod
#SBATCH --time=00:30:00
#SBATCH --nodes=1 
#SBATCH --ntasks-per-node=1
#SBATCH --gres=gpu:1
#SBATCH --gpus-per-node=1
#SBATCH --cpus-per-task=8
#SBATCH --mem=123500M
#SBATCH --output=feat_extract%j.out
#SBATCH --error=feat_extract%j.err

echo "Job started at $(date)"
echo "Memory allocated: $SBATCH_MEM_PER_NODE MB"

# Avvia il monitoraggio in background
bash monitor_resources.sh $SLURM_JOB_ID &
MONITOR_PID=$!

# --- Setup dell'ambiente ---
echo "NODELIST="${SLURM_NODELIST}
master_addr=$(scontrol show hostnames "$SLURM_JOB_NODELIST" | head -n 1)
export MASTER_ADDR=$master_addr
echo "MASTER_ADDR="$MASTER_ADDR

module load cuda cudnn nccl openmpi spack/0.21.0-68a
spack load python@3.9
source /leonardo_work/INA24_C5B09/thingsvision/bin/activate

python -c "import torch; print('CUDA available:', torch.cuda.is_available()); print('CUDA device count:', torch.cuda.device_count())"

# --- Valori predefiniti ---
### MODIFICA 1: Aggiunti i nuovi argomenti e rimossi quelli vecchi ###
INPUT_FOLDER=""
INFO_JSON_NAME="info.json" # Valore di default per il file json
CUDA_DEVICES="0"
MODEL_TYPE=""
CKPT_PATH=""
MODEL_NAME=""
MODEL_PARAMETERS=""
SOURCE="torchvision"
BATCH_SIZE=1024
MODULE_NAME=""
NORMALIZATION="minmax"
RESIZE=224
TEST_MODE=false
TEST_BATCHES=0

# --- Analisi degli argomenti ---
while [[ $# -gt 0 ]]; do
  key="$1"
  case $key in
    ### MODIFICA 2: Aggiunto il parsing per i nuovi argomenti ###
    --input_folder)
      INPUT_FOLDER="$2"
      shift 2
      ;;
    --info_json_name)
      INFO_JSON_NAME="$2"
      shift 2
      ;;
    --cuda_devices)
      CUDA_DEVICES="$2"
      shift 2
      ;;
    --model_type)
      MODEL_TYPE="$2"
      shift 2
      ;;
    --ckpt_path)
      CKPT_PATH="$2"
      shift 2
      ;;
    --model_name)
      MODEL_NAME="$2"
      shift 2
      ;;
    --model_parameters)
      MODEL_PARAMETERS=""
      shift
      while [[ $# -gt 0 && ! $1 == --* ]]; do
        MODEL_PARAMETERS="$MODEL_PARAMETERS $1"
        shift
      done
      MODEL_PARAMETERS="${MODEL_PARAMETERS## }"
      ;;
    --source)
      SOURCE="$2"
      shift 2
      ;;
    --batch_size)
      BATCH_SIZE="$2"
      shift 2
      ;;
    --module_name)
      MODULE_NAME="$2"
      shift 2
      ;;
    --normalization)
      NORMALIZATION="$2"
      shift 2
      ;;
    --resize)
      RESIZE="$2"
      shift 2
      ;;
    --test_mode)
      TEST_MODE=true
      shift
      ;;
    --test_batches)
      TEST_BATCHES="$2"
      shift 2
      ;;
    *)
      echo "Parametro sconosciuto: $1"
      shift
      ;;
  esac
done

### --- BLOCCO DI DEBUG --- ###
echo "-------------------------------------"
echo "DEBUG: Valori delle variabili dopo il parsing"
echo "INPUT_FOLDER:     '$INPUT_FOLDER'"
echo "MODEL_TYPE:       '$MODEL_TYPE'"
echo "MODEL_NAME:       '$MODEL_NAME'" # <-- Questa sarà probabilmente vuota
echo "CKPT_PATH:        '$CKPT_PATH'"
echo "MODULE_NAME:      '$MODULE_NAME'"
echo "-------------------------------------"
### --- FINE BLOCCO DI DEBUG --- ###

# Controlla se input_folder è stato specificato (parametro richiesto)
if [ -z "$INPUT_FOLDER" ]; then
  echo "Errore: --input_folder è un argomento richiesto"
  exit 1
fi

# Imposta CUDA_VISIBLE_DEVICES
export CUDA_VISIBLE_DEVICES="$CUDA_DEVICES"

# --- Costruzione del comando ---
### MODIFICA 3: Aggiornato il nome dello script Python ###
CMD="python src/external_feature_extraction.py"

# Aggiungi i parametri al comando
### MODIFICA 4: Usiamo i nuovi argomenti per costruire il comando ###
if [ ! -z "$INPUT_FOLDER" ]; then CMD="$CMD --input_folder $INPUT_FOLDER"; fi
if [ ! -z "$INFO_JSON_NAME" ]; then CMD="$CMD --info_json_name $INFO_JSON_NAME"; fi
if [ ! -z "$MODEL_TYPE" ]; then CMD="$CMD --model_type $MODEL_TYPE"; fi
if [ ! -z "$CKPT_PATH" ]; then CMD="$CMD --ckpt_path $CKPT_PATH"; fi
if [ ! -z "$MODEL_NAME" ]; then CMD="$CMD --model_name $MODEL_NAME"; fi
if [ ! -z "$MODEL_PARAMETERS" ]; then 
  for param in $MODEL_PARAMETERS; do
    CMD="$CMD --model_parameters $param"
  done
fi
if [ ! -z "$SOURCE" ]; then CMD="$CMD --source $SOURCE"; fi
if [ ! -z "$BATCH_SIZE" ]; then CMD="$CMD --batch_size $BATCH_SIZE"; fi
if [ ! -z "$MODULE_NAME" ]; then CMD="$CMD --module_name $MODULE_NAME"; fi
if [ ! -z "$NORMALIZATION" ]; then CMD="$CMD --normalization $NORMALIZATION"; fi
if [ ! -z "$RESIZE" ]; then CMD="$CMD --resize $RESIZE"; fi
if [ "$TEST_MODE" = true ]; then 
  CMD="$CMD --test_mode"
  if [ -n "$TEST_BATCHES" ] && [ "$TEST_BATCHES" -gt 0 ]; then 
    CMD="$CMD --test_batches $TEST_BATCHES"
  fi
fi

echo "Esecuzione comando: $CMD"
eval $CMD

# Ferma il monitoraggio
kill $MONITOR_PID

echo "Job finished at $(date)"