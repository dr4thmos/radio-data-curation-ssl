#!/bin/bash
#SBATCH --job-name=feat_extract
#SBATCH --account=INA24_C5B09
#SBATCH --partition=boost_usr_prod
#SBATCH --qos=boost_qos_lprod
#SBATCH --time=48:00:00
#SBATCH --nodes=1 
#SBATCH --ntasks-per-node=1
#SBATCH --gres=gpu:1
#SBATCH --gpus-per-node=1
#SBATCH --cpus-per-task=8
#SBATCH --mem=123500M
#SBATCH --output=feat_extract%j.out
#SBATCH --error=feat_extract%j.err


echo "Job started at $(date)"
echo "Memory allocated: $SBATCH_MEM_PER_NODE MB"

# Avvia il monitoraggio in background
bash monitor_resources.sh $SLURM_JOB_ID &
MONITOR_PID=$!




##########sbatch script.sh --source_id c6e73956a66a49f98117157279342b47 --model_type thingsvision --model_name OpenCLIP --model_parameters "variant=ViT-B-32" "dataset=laion400m_e32"


GPUS_PER_NODE=1
echo "NODELIST="${SLURM_NODELIST}
master_addr=$(scontrol show hostnames "$SLURM_JOB_NODELIST" | head -n 1)
export MASTER_ADDR=$master_addr
echo "MASTER_ADDR="$MASTER_ADDR
echo "SLURM_NTASKS="$SLURM_NTASKS
NTASKS_PER_NODE=$((SLURM_NTASKS / SLURM_JOB_NUM_NODES))
echo "NTASKS_PER_NODE="$NTASKS_PER_NODE
export WORLD_SIZE=$((GPUS_PER_NODE * SLURM_NNODES))
echo "WORLD_SIZE=$WORLD_SIZE"
MASTER_PORT=11111

module load cuda cudnn nccl openmpi spack/0.21.0-68a
spack load python@3.9
source /leonardo_work/INA24_C5B09/thingsvision/bin/activate

python -c "import torch; print('CUDA available:', torch.cuda.is_available()); print('CUDA device count:', torch.cuda.device_count())"

# Valori predefiniti
SOURCE_ID=""
CUDA_DEVICES="0"
FEATURES_FOLDER="$(pwd)/features"
MODEL_TYPE=""
CKPT_PATH=""
MODEL_TYPE="thingsvision"
MODEL_NAME=""
MODEL_PARAMETERS="variant=ViT-B-32 dataset=laion400m_e32"
BACKEND="pt"
SOURCE="custom"
BATCH_SIZE=128
MODULE_NAME=""
NORMALIZATION="mean05std05"
RESIZE=224
OUTPUT_FILE_FORMAT="npy"
TEST_MODE=false
TEST_BATCHES=0

# Analizza gli argomenti
while [[ $# -gt 0 ]]; do
  key="$1"
  case $key in
    --source_id)
      SOURCE_ID="$2"
      shift 2
      ;;
    --cuda_devices)
      CUDA_DEVICES="$2"
      shift 2
      ;;
    --features_folder)
      FEATURES_FOLDER="$2"
      shift 2
      ;;
    --model_type)
      MODEL_TYPE="$2"
      shift 2
      ;;
    --ckpt_path)
      CKPT_PATH="$2"
      shift 2
      ;;
    --model_name)
      MODEL_NAME="$2"
      shift 2
      ;;
    --model_parameters)
      MODEL_PARAMETERS=""
      shift
      while [[ $# -gt 0 && ! $1 == --* ]]; do
        MODEL_PARAMETERS="$MODEL_PARAMETERS $1"
        shift
      done
      MODEL_PARAMETERS="${MODEL_PARAMETERS## }"  # Rimuovi spazio iniziale
      ;;
    --backend)
      BACKEND="$2"
      shift 2
      ;;
    --source)
      SOURCE="$2"
      shift 2
      ;;
    --batch_size)
      BATCH_SIZE="$2"
      shift 2
      ;;
    --module_name)
      MODULE_NAME="$2"
      shift 2
      ;;
    --normalization)
      NORMALIZATION="$2"
      shift 2
      ;;
    --resize)
      RESIZE="$2"
      shift 2
      ;;
    --output_file_format)
      OUTPUT_FILE_FORMAT="$2"
      shift 2
      ;;
    --test_mode)
      TEST_MODE=true
      shift
      ;;
    --test_batches)
      TEST_BATCHES="$2"
      shift 2
      ;;
    *)
      echo "Parametro sconosciuto: $1"
      shift
      ;;
  esac
done

# Controlla se source_id è stato specificato (parametro richiesto)
if [ -z "$SOURCE_ID" ]; then
  echo "Errore: --source_id è richiesto"
  exit 1
fi

# Imposta CUDA_VISIBLE_DEVICES
export CUDA_VISIBLE_DEVICES="$CUDA_DEVICES"

# Costruisci il comando
CMD="python src/3a_feature_extraction_from_mlflow_ui.py"

# Aggiungi i parametri al comando
if [ ! -z "$SOURCE_ID" ]; then CMD="$CMD --source_id $SOURCE_ID"; fi
if [ ! -z "$FEATURES_FOLDER" ]; then CMD="$CMD --features_folder $FEATURES_FOLDER"; fi
if [ ! -z "$MODEL_TYPE" ]; then CMD="$CMD --model_type $MODEL_TYPE"; fi
if [ ! -z "$CKPT_PATH" ]; then CMD="$CMD --ckpt_path $CKPT_PATH"; fi
if [ ! -z "$MODEL_NAME" ]; then CMD="$CMD --model_name $MODEL_NAME"; fi
if [ ! -z "$MODEL_PARAMETERS" ]; then 
  for param in $MODEL_PARAMETERS; do
    CMD="$CMD --model_parameters $param"
  done
fi
if [ ! -z "$BACKEND" ]; then CMD="$CMD --backend $BACKEND"; fi
if [ ! -z "$SOURCE" ]; then CMD="$CMD --source $SOURCE"; fi
if [ ! -z "$BATCH_SIZE" ]; then CMD="$CMD --batch_size $BATCH_SIZE"; fi
if [ ! -z "$MODULE_NAME" ]; then CMD="$CMD --module_name $MODULE_NAME"; fi
if [ ! -z "$NORMALIZATION" ]; then CMD="$CMD --normalization $NORMALIZATION"; fi
if [ ! -z "$RESIZE" ]; then CMD="$CMD --resize $RESIZE"; fi
if [ ! -z "$OUTPUT_FILE_FORMAT" ]; then CMD="$CMD --output_file_format $OUTPUT_FILE_FORMAT"; fi
if [ "$TEST_MODE" = true ]; then 
  CMD="$CMD --test_mode"
fi
if [ -n "$TEST_BATCHES" ] && [ "$TEST_BATCHES" -gt 0 ]; then 
  CMD="$CMD --test_batches $TEST_BATCHES"
fi

# Aggiungi i parametri di configurazione, se specificati
if [ ! -z "$CONFIG_PATH" ] && [ ! -z "$CONFIG_NAME" ]; then
  CMD="$CMD --config-path $CONFIG_PATH --config-name $CONFIG_NAME"
fi

echo "Esecuzione comando: $CMD"
eval $CMD

# Ferma il monitoraggio
kill $MONITOR_PID

echo "Job finished at $(date)"